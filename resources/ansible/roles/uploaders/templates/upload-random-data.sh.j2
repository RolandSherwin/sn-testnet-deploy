#!/usr/bin/env bash
UPLOAD_METRIC_DIR="/mnt/ant-storage/logs/upload_files/${USER}"

if [[ -n "${SECRET_KEY}" ]] && ! grep -q "export SECRET_KEY=" ~/.profile; then
  echo "export SECRET_KEY=${SECRET_KEY}" >> ~/.profile
fi

if [[ -n "${RPC_URL}" ]] && ! grep -q "export RPC_URL=" ~/.profile; then
  echo "export RPC_URL=${RPC_URL}" >> ~/.profile
fi

if [[ -n "${PAYMENT_TOKEN_ADDRESS}" ]] && ! grep -q "export PAYMENT_TOKEN_ADDRESS=" ~/.profile; then
  echo "export PAYMENT_TOKEN_ADDRESS=${PAYMENT_TOKEN_ADDRESS}" >> ~/.profile
fi

if [[ -n "${DATA_PAYMENTS_ADDRESS}" ]] && ! grep -q "export DATA_PAYMENTS_ADDRESS=" ~/.profile; then
  echo "export DATA_PAYMENTS_ADDRESS=${DATA_PAYMENTS_ADDRESS}" >> ~/.profile
fi

if [[ -n "${EVM_NETWORK}" ]] && ! grep -q "export EVM_NETWORK=" ~/.profile; then
  echo "export EVM_NETWORK=${EVM_NETWORK}" >> ~/.profile
fi

CONTACT_PEER_ARG=""
NETWORK_CONTACTS_URL_ARG=""
NETWORK_ID_ARG=""
TESTNET_ARG=""

if [ -n "${1:-}" ]; then
  echo "Setting contact peer arg to ${1:-}"
  CONTACT_PEER_ARG="--peer ${1:-}"
fi
if [ -n "${2:-}" ]; then
  echo "Setting network contacts URL arg to ${2:-}"
  NETWORK_CONTACTS_URL_ARG="--network-contacts-url ${2:-}"
fi
if [ -n "${3:-}" ]; then
  echo "Setting network ID arg to ${3:-}"
  NETWORK_ID_ARG="--network-id ${3:-}"
  echo "Setting --testnet arg"
  TESTNET_ARG="--testnet"
fi

if ! command -v ant &> /dev/null; then
  echo "Error: 'ant' not found in PATH."
  exit 1
fi

get_error_enum() {
  local exit_code=$1
  case $exit_code in
    6)
      echo "INVALID_INPUT"
      ;;
    11)
      echo "SERIALIZATION_ERROR"
      ;;
    12)
      echo "IO_ERROR"
      ;;
    13)
      echo "NETWORK_ERROR"
      ;;
    14)
      echo "PROTOCOL_ERROR"
      ;;
    15)
      echo "SELF_ENCRYPTION_ERROR"
      ;;
    21)
      echo "EVM_WALLET_NETWORK_MISMATCH"
      ;;
    22)
      echo "EVM_WALLET_ERROR"
      ;;
    23)
      echo "PAY_COST_ERROR"
      ;;
    31)
      echo "INVALID_DATA_MAP"
      ;;
    32)
      echo "DECRYPTION_ERROR"
      ;;
    41)
      echo "PUT_COST_ERROR"
      ;;
    42)
      echo "WALLET_ERROR"
      ;;
    43)
      echo "SCRATCHPAD_BAD_OWNER"
      ;;
    44)
      echo "PAYMENT_UNEXPECTEDLY_INVALID"
      ;;
    45)
      echo "PAYEES_MISSING"
      ;;
    *)
      echo "UNKNOWN_ERROR"
      ;;
  esac
}

generate_random_data_file_and_upload() {
  tmpfile=$(mktemp)
  dd if=/dev/urandom of="$tmpfile" bs=100M count=1 iflag=fullblock &> /dev/null

  echo "Generated random data file at $tmpfile"
  file_size_kb=$(du -k "$tmpfile" | cut -f1)

  file_hash=$(sha256sum "$tmpfile" | awk '{ print $1 }')
  echo "SHA-256 hash of the file: $file_hash"

  start_time=$(date +"%s")
  stderr=$(ant $CONTACT_PEER_ARG $NETWORK_CONTACTS_URL_ARG $TESTNET_ARG $NETWORK_ID_ARG --json file upload "$tmpfile" 2>&1 1>/dev/null)
  end_time=$(date +"%s")
  json_output=$(echo "$stderr" | jq -r '.')

  echo "$stderr"
  records_paid=$(echo "$json_output" | jq -r '.task_summary.records_paid')
  records_uploaded=$(echo "$json_output" | jq -r '.task_summary.records_uploaded')
  records_upload_failed=$(echo "$json_output" | jq -r '.task_summary.records_upload_failed')
  records_already_paid=$(echo "$json_output" | jq -r '.task_summary.records_already_paid')
  tokens_spent=$(echo "$json_output" | jq -r '.task_summary.tokens_spent')

  exit_code=$(echo "$json_output" | jq -r '.exit_code')
  elapsed=$(($end_time - $start_time))

  if [ "$exit_code" -eq 0 ]; then
    uploaded_address=$(echo "$json_output" | jq -r '.uploaded_address')
    echo "Successfully uploaded $tmpfile using SAFE CLI. Uploaded address: $uploaded_address"

    success_file="$UPLOAD_METRIC_DIR/metrics_success.csv"
    if [ ! -f "$success_file" ]; then
      echo "Timestamp_Start,Timestamp_Finish,File_Address,Duration,Chunks_Uploaded,Chunk_Upload_Failed,Chunks_Already_Paid,Status,Service_Type,Ant_User,Store_Cost,File_Size,Sha256_Hash" > "$success_file"
    fi

    echo "$start_time,$end_time,$uploaded_address,$elapsed,$records_uploaded,$records_upload_failed,$records_already_paid,SUCCESS,UPLOADER,$USER,$tokens_spent,$file_size_kb,$file_hash" >> "$success_file"
  else
    echo "Failed to upload $tmpfile using SAFE CLI"

    failure_file="$UPLOAD_METRIC_DIR/metrics_failure.csv"
    error_enum=$(get_error_enum $exit_code)
    if [ ! -f "$failure_file" ]; then
      echo "Timestamp_Start,Timestamp_Finish,Duration,Chunks_Uploaded,Chunk_Upload_Failed,Chunks_Already_Paid,Status,Error_Enum,Service_Type,Ant_User,Store_Cost,File_Size,Sha256_Hash" > "$failure_file"
    fi
    echo "$start_time,$end_time,$elapsed,$records_uploaded,$records_upload_failed,$records_already_paid,FAILURE,$error_enum,UPLOADER,$USER,$tokens_spent,$file_size_kb,$file_hash" >> "$failure_file"
  fi

  rm "$tmpfile"
}

if [ ! -d "$UPLOAD_METRIC_DIR" ]; then
  mkdir -p "$UPLOAD_METRIC_DIR"
fi

while true; do
  echo "================================"
  echo "Generating and uploading file..."
  echo "================================"
  echo "$(date +"%A, %B %d, %Y %H:%M:%S")"
  generate_random_data_file_and_upload
  sleep 10
done
