#!/usr/bin/env bash
SUCCESSFUL_UPLOAD_METRIC_FILE="/mnt/ant-storage/logs/upload_files/random_uploader/${USER}/metrics_success.csv"
DOWNLOAD_DIR="/home/${USER}/downloaded_files"
DOWNLOAD_METRICS_DIR="/mnt/ant-storage/logs/download_files/download_verifier/${USER}"
SLEEP_INTERVAL=20

mkdir -p "${UPLOAD_METRIC_DIR}"

CONTACT_PEER_ARG=""
NETWORK_CONTACTS_URL_ARG=""
NETWORK_ID_ARG=""
TESTNET_ARG=""

if [ -n "${1:-}" ]; then
  echo "Setting contact peer arg to ${1:-}"
  CONTACT_PEER_ARG="--peer ${1:-}"
fi
if [ -n "${2:-}" ]; then
  echo "Setting network contacts URL arg to ${2:-}"
  NETWORK_CONTACTS_URL_ARG="--network-contacts-url ${2:-}"
fi
if [ -n "${3:-}" ]; then
  echo "Setting network ID arg to ${3:-}"
  NETWORK_ID_ARG="--network-id ${3:-}"
  echo "Setting --testnet arg"
  TESTNET_ARG="--testnet"
fi

if ! command -v ant &> /dev/null; then
  echo "Error: 'ant' not found in PATH."
  exit 1
fi

get_error_enum() {
  local exit_code=$1
  case $exit_code in
    0)
      echo "SUCCESS"
      ;;
    6)
      echo "INVALID_INPUT"
      ;;
    11)
      echo "SERIALIZATION_ERROR"
      ;;
    12)
      echo "IO_ERROR"
      ;;
    13)
      echo "NETWORK_ERROR"
      ;;
    14)
      echo "PROTOCOL_ERROR"
      ;;
    15)
      echo "SELF_ENCRYPTION_ERROR"
      ;;
    21)
      echo "EVM_WALLET_NETWORK_MISMATCH"
      ;;
    22)
      echo "EVM_WALLET_ERROR"
      ;;
    23)
      echo "PAY_COST_ERROR"
      ;;
    31)
      echo "INVALID_DATA_MAP"
      ;;
    32)
      echo "DECRYPTION_ERROR"
      ;;
    36)
      echo "UNRECOGNIZED_INPUT"
      ;;
    37)
      echo "FAILED_GET"
      ;;
    41)
      echo "PUT_COST_ERROR"
      ;;
    42)
      echo "WALLET_ERROR"
      ;;
    43)
      echo "SCRATCHPAD_BAD_OWNER"
      ;;
    44)
      echo "PAYMENT_UNEXPECTEDLY_INVALID"
      ;;
    45)
      echo "PAYEES_MISSING"
      ;;
    51)
      echo "NO_BOOTSTRAP_PEERS_FOUND"
      ;;
    52)
      echo "FAILED_TO_PARSE_CACHE_DATA"
      ;;
    53)
      echo "COULD_NOT_OBTAIN_DATA_DIR"
      ;;
    54)
      echo "FAILED_TO_OBTAIN_ADDRS_FROM_URL"
      ;;
    55)
      echo "FAILED_TO_PARSE_URL"
      ;;
    56)
      echo "JSON_ERROR"
      ;;
    57) 
      echo "HTTP_ERROR"
      ;;
    58)
      echo "LOCK_ERROR"
      ;;
    59)
      echo "CONNECTION_TIMED_OUT"
      ;;
    60)
      echo "CONNECTION_TIMED_OUT_WITH_INCOMPATIBLE_PROTOCOL"
      ;;
    61)
      echo "FAILED_TO_GET_EVM_NETWORK"
      ;;
    *)
      echo "UNKNOWN_ERROR"
      ;;
  esac
}

download_file() {
  local file_ref=$1
  local expected_hash=$2
  local expected_file_size=$3
  # Multiple downloaders can be running on the same machine, so one or more
  # could select the same file address at the same time. We therefore use a GUID
  # to ensure a unique output file.
  local download_filename=$(uuidgen)
  (
    download_path="$DOWNLOAD_DIR/$download_filename"
    echo "Downloading file: $file_ref" 
    start_time=$(date +%s%N)
    stdout=$(ant $CONTACT_PEER_ARG $NETWORK_CONTACTS_URL_ARG $TESTNET_ARG $NETWORK_ID_ARG file download "$file_ref" "$download_path" --quorum majority 2>&1)
    exit_code=$?
    end_time=$(date +%s%N)
    echo "$stdout"
    echo "Exit code: $exit_code"
    version_stdout=$(ant --version 2>&1)
    package_version=$(echo "$version_stdout" | grep "Package version:" | awk '{print $3}')
    build_date=$(echo "$version_stdout" | grep "Git info:" | awk '{print $7}')
    echo "Package version: $package_version"
    echo "Build date: $build_date"

    elapsed=$(echo "scale=2; ($end_time - $start_time) / 1000000000" | bc)
    echo "Elapsed time: $elapsed seconds"
    error_enum=$(get_error_enum $exit_code)
    
    actual_hash="0x0"
    actual_file_size_kb=0
    # Only verify hash if download was successful
    if [ $exit_code -eq 0 ] && [ -n "$expected_hash" ]; then
        # Find the first file in the download directory
        first_file=$(find "$download_path" -type f | head -n 1)
        
        if [ -n "$first_file" ]; then
            # Calculate hash of the first file
            actual_hash=$(sha256sum "$first_file" | awk '{print $1}')
            actual_file_size_kb=$(du -k "$first_file" | cut -f1)
            
            # Compare hashes
            if [ "$actual_hash" != "$expected_hash" ]; then
                echo "Hash mismatch! Expected: $expected_hash, Got: $actual_hash"
                exit_code=1 # Set to non zero
                error_enum=HASH_MISMATCH
            else
                echo "Hash verification successful"
            fi
        else
            echo "No files found in $download_path"
            exit_code=1
            error_enum=NO_FILES_FOUND
        fi
    fi

    rm -rf "$download_path"

    if [ $exit_code -eq 0 ]; then
        echo "Successfully downloaded $file_ref using ANT CLI"
        success_file="$DOWNLOAD_METRICS_DIR/metrics_success.csv"

        if [ ! -f "$success_file" ]; then
        echo "TIMESTAMP_START,TIMESTAMP_FINISH,DATA_ADDRESS,DURATION,RETRIES,FETCHED_RECORDS,TOTAL_RECORDS,EXIT_STATUS,SERVICE_TYPE,ANT_USER,SERVICE_NUMBER,EXPECTED_TOTAL_SIZE,ACTUAL_TOTAL_SIZE,ACTUAL_SHA256_HASH,EXPECTED_SHA256_HASH,ANT_PACKAGE_VERSION,ANT_PACKAGE_BUILD_DATE" > "$success_file"
        fi
        echo "$start_time,$end_time,$file_ref,$elapsed,0,0,0,$error_enum,DOWNLOAD_VERIFIER,$USER,1,$expected_file_size,$actual_file_size_kb,$actual_hash,$expected_hash,$package_version,$build_date" >> "$success_file"
    else
        echo "Failed to download $file_ref using ANT CLI"
        failure_file="$DOWNLOAD_METRICS_DIR/metrics_failure.csv"

        if [ ! -f "$failure_file" ]; then
        echo "TIMESTAMP_START,TIMESTAMP_FINISH,DATA_ADDRESS,DURATION,RETRIES,FETCHED_RECORDS,TOTAL_RECORDS,EXIT_STATUS,SERVICE_TYPE,ANT_USER,SERVICE_NUMBER,EXPECTED_TOTAL_SIZE,ACTUAL_TOTAL_SIZE,ACTUAL_SHA256_HASH,EXPECTED_SHA256_HASH,ANT_PACKAGE_VERSION,ANT_PACKAGE_BUILD_DATE" > "$failure_file"
        fi
        echo "$start_time,$end_time,$file_ref,$elapsed,0,0,0,$error_enum,DOWNLOAD_VERIFIER,$USER,1,$expected_file_size,$actual_file_size_kb,$actual_hash,$expected_hash,$package_version,$build_date" >> "$failure_file"
    fi
  )
}

while true; do
  if [[ -f "$SUCCESSFUL_UPLOAD_METRIC_FILE" && -s "$SUCCESSFUL_UPLOAD_METRIC_FILE" ]]; then
    # downloads the 3rd latest file
    file_ref=$(tail -n 3 "$SUCCESSFUL_UPLOAD_METRIC_FILE" | cut -d ',' -f 3 | head -n 1)
    file_hash=$(tail -n 3 "$SUCCESSFUL_UPLOAD_METRIC_FILE" | cut -d ',' -f 16 | head -n 1 )
    file_size=$(tail -n 3 "$SUCCESSFUL_UPLOAD_METRIC_FILE" | cut -d ',' -f 15 | head -n 1 )

    if [[ -n "$file_ref" ]]; then
      download_file "$file_ref" "$file_hash" "$file_size"
      sleep "$SLEEP_INTERVAL"
    else
      echo "Selected line is empty. Retrying in 5 seconds..."
      sleep 5
    fi
  else
    echo "Upload metric file '$SUCCESSFUL_UPLOAD_METRIC_FILE' does not exist or is empty. Retrying in 5 seconds..."
    sleep 5
  fi
done